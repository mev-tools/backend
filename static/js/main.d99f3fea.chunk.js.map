{"version":3,"sources":["api/index.tsx","App.tsx","index.tsx"],"names":["hexToUTF8","hex","str","i","length","charCode","parseInt","substr","String","fromCharCode","csvToObj","text","rows","split","headers","map","h","trim","replace","slice","r","cells","obj","forEach","c","Api","token","addressData","fetch","this","referrer","referrerPolicy","body","method","mode","credentials","response","labels","contractVerified","includes","console","error","score","toLowerCase","status","values","parseFloat","keys","Object","fromEntries","key","JSON","stringify","filters","traits","traitsRange","slug","rankRange","price","sort","currentEthPrice","fields","id","name","address","collectionName","supportsWyvern","collectionSymbol","externalLink","imageUrl","smallImageUrl","animationUrl","openRarityRank","standard","perItemEthPrice","market","marketplace","pendingTrxs","currentBasePrice","paymentToken","marketUrl","tokenId","priceInfo","tokenReserves","ethReserves","sudoPoolAddress","sellOrders","startingPrice","rarityScore","offset","limit","markets","json","jsonrpc","params","to","data","result","App","api","useEffect","getWashtradingTop50","then","log","setTop50Wash","getPhishersTop50","setTop50Phishers","getMEVTop50","setTop50MEV","useState","top50Wash","top50MEV","mev","setMEV","phishing","setPhishing","washtrading","setWashtrading","className","style","backgroundColor","padding","maxWidth","borderRadius","boxShadow","onValuesChange","formValues","getMEVStats","count","catch","err","getPhishingStats","phisher","getWashtradingStats","washed","amount","layout","footer","block","color","size","Item","label","rules","max","min","message","placeholder","autoFocus","marginTop","header","extra","toFixed","Tab","title","item","mev_trades","fontSize","contract_address","wash_volume","nft_contract_address","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.d99f3fea.chunk.js","sourcesContent":["\nexport function hexToUTF8(hex: string) {\n  let str = '';\n  for (let i = 0; i < hex.length; i += 2) {\n    let charCode = parseInt(hex.substr(i, 2), 16);\n    if (charCode !== 0) {\n      str += String.fromCharCode(charCode);\n    }\n  }\n  return str;\n}\n\nconst csvToObj = (text:string) => {\n  const rows = text.split(\"\\n\");\nconst headers = rows[0].split(\",\").map(h => h.trim().replace(/\"/g, ''));\nconst values = rows.slice(1).map(r => {\n  const cells = r.split(\",\");\n  const obj:any = {};\n  cells.forEach((c, i) => {\n    obj[headers[i]] = c.trim().replace(/\"/g, '');\n  });\n  return obj\n})\nreturn values\n}\n\nexport class Api {\n  headers = {\n    \"accept-language\": \"en-GB,en-US;q=0.9,en;q=0.8\",\n    \"sec-ch-ua\":\n      '\"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\", \"Google Chrome\";v=\"108\"',\n    \"sec-ch-ua-mobile\": \"?0\",\n    \"sec-ch-ua-platform\": '\"macOS\"',\n  };\n  async getEtherscanStatus(token: string) {\n    const addressData: any = {};\n    try {\n      const response = await fetch(`https://etherscan.io/address/${token}`, {\n        headers: this.headers,\n        referrer: \"https://etherscan.io/\",\n        referrerPolicy: \"origin-when-cross-origin\",\n        body: null,\n        method: \"GET\",\n        mode: \"cors\",\n        credentials: \"include\",\n      });\n      const text = await response.text();\n\n      const regex = /u-label u-label--xs.*?>(.+)</g;\n\n      const labels:string[] = [] \n      const contractVerified = text.includes(\n        \">Contract Source Code Verified <\"\n      );\n      addressData.contractVerified = contractVerified;\n      addressData.labels = labels;\n    } catch (error) {\n      console.error(error);\n    }\n    try {\n      const response = await fetch(`https://etherscan.io/token/${token}`, {\n        headers: this.headers,\n        referrer: \"https://etherscan.io/\",\n        referrerPolicy: \"origin-when-cross-origin\",\n        body: null,\n        method: \"GET\",\n        mode: \"cors\",\n        credentials: \"include\",\n      });\n      const text = await response.text();\n      try {\n        const score = text.split(\"title='Reputation \")[1].split(\":\")[0];\n        addressData.score = score;\n      } catch (error) { console.error(error);}\n      try {\n        const verified = text.includes(\"Blue Check Mark:\");\n        if (verified) {\n          addressData.score = \"Verified\"\n        }\n      } catch (error) { console.error(error);}\n    } catch (error) {\n      console.error(error);\n      \n    }\n\n    return addressData\n  }\n  async getWashtradingStats(token: string) {\n    try {\n      const response = await fetch(\n        `https://raw.githubusercontent.com/mev-tools/backend/main/backend/washtrades/${token.toLowerCase()}`,\n        {\n          headers: this.headers,\n        }\n      );\n      if (response.status !== 200) {\n        return;\n      }\n      const text = await response.text();\n      const values = text.split(\",\").map(parseFloat);\n      const keys = [\"amount\", \"organic\", \"washed\", \"unfiltered\"];\n      return {\n        ...Object.fromEntries(keys.map((key, i) => [key, values[i]])),\n      };\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getWashtradingTop50():Promise<any> {\n    try {\n      const response = await fetch(\n        `https://raw.githubusercontent.com/mev-tools/backend/main/backend/washtrades/top50.csv`,\n        {\n          headers: this.headers,\n        }\n      );\n      if (response.status !== 200) {\n        return;\n      }\n      const text = await response.text();\n     return csvToObj(text)\n    }catch (error) {\n      console.error(error);\n    }\n}\n    \n     async getPhishersTop50():Promise<any> {\n    try {\n      const response = await fetch(\n        `https://raw.githubusercontent.com/mev-tools/backend/main/backend/phishers/top50.csv`,\n        {\n          headers: this.headers,\n        }\n      );\n      if (response.status !== 200) {\n        return;\n      }\n      const text = await response.text();\n     return csvToObj(text)\n    }catch (error) {\n      console.error(error);\n    }\n}\n\n   async getMEVTop50():Promise<any> {\n    try {\n      const response = await fetch(\n        `https://raw.githubusercontent.com/mev-tools/backend/main/backend/mev/top50.csv`,\n        {\n          headers: this.headers,\n        }\n      );\n      if (response.status !== 200) {\n        return;\n      }\n      const text = await response.text();\n     return csvToObj(text)\n    }catch (error) {\n      console.error(error);\n    }\n}\n\n\n  async getPhishingStats(token: string) {\n    try {\n      const response = await fetch(\n        `https://raw.githubusercontent.com/mev-tools/backend/main/backend/phishers/${token.toLowerCase()}`,\n        {\n          headers: this.headers,\n        }\n      );\n      if (response.status !== 200) {\n        return;\n      }\n      const text = await response.text();\n      const values = text.split(\",\").map(parseFloat);\n      const keys = [\"phisher\"];\n      return {\n        ...Object.fromEntries(keys.map((key, i) => [key, values[i]])),\n      };\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async getHoldingStats(token: string) {\n    try {\n      const response = await fetch(\n        `https://raw.githubusercontent.com/mev-tools/backend/main/backend/holding/${token.toLowerCase()}`,\n        {\n          headers: this.headers,\n        }\n      );\n      if (response.status !== 200) {\n        return;\n      }\n      const text = await response.text();\n      const values = text.split(\",\").map(parseFloat);\n      const keys = [\"amount\", \"seconds\"];\n      return {\n        ...Object.fromEntries(keys.map((key, i) => [key, values[i]])),\n      };\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async getMEVStats(token: string) {\n    try {\n      const response = await fetch(\n        `https://raw.githubusercontent.com/mev-tools/backend/main/backend/mev/${token.toLowerCase()}`,\n        {\n          headers: this.headers,\n        }\n      );\n      if (response.status !== 200) {\n        return;\n      }\n      const text = await response.text();\n      const values = text.split(\",\").map(parseInt);\n      const keys = [\"count\"];\n      return {\n        ...Object.fromEntries(keys.map((key, i) => [key, values[i]])),\n      };\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getGemXYZStats(token: string) {\n    const response = await fetch(\"https://api-v2-2.gemlabs.xyz/assets\", {\n      headers: {\n        \"content-type\": \"application/json\",\n        \"x-api-key\": \"rLnNH1tdrT09EQjGsjrSS7V3uGonfZLW\",\n      },\n      body: JSON.stringify({\n        filters: {\n          traits: {},\n          traitsRange: {},\n          slug: \"boredapeyachtclub\",\n          rankRange: {},\n          price: {},\n        },\n        sort: { currentEthPrice: \"asc\" },\n        fields: {\n          id: 1,\n          name: 1,\n          address: 1,\n          collectionName: 1,\n          supportsWyvern: 1,\n          collectionSymbol: 1,\n          externalLink: 1,\n          imageUrl: 1,\n          smallImageUrl: 1,\n          animationUrl: 1,\n          openRarityRank: 1,\n          standard: 1,\n          perItemEthPrice: 1,\n          market: 1,\n          marketplace: 1,\n          pendingTrxs: 1,\n          currentBasePrice: 1,\n          paymentToken: 1,\n          marketUrl: 1,\n          tokenId: 1,\n          priceInfo: 1,\n          tokenReserves: 1,\n          ethReserves: 1,\n          sudoPoolAddress: 1,\n          sellOrders: 1,\n          startingPrice: 1,\n          rarityScore: 1,\n        },\n        offset: 0,\n        limit: 30,\n        markets: [],\n        status: [\"buy_now\"],\n      }),\n      method: \"POST\",\n    });\n    const json = await response.json();\n    return json;\n  }\n\n  async getScamDBEntry(token: string) {\n    try {\n      const response = await fetch(\n        `https://api.cryptoscamdb.org/v1/check/${token}`,\n        {\n          headers: this.headers,\n        }\n      );\n      const json = await response.json();\n      return json;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getName (token: string) {\n    try {\n      \n    const body = JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: 1,\n      method: \"eth_call\",\n      params: [\n        {\n          to: token,\n          data: \"0x06fdde03\"\n        },\n        \"latest\"\n      ]\n    })\n    const response = await fetch(`https://mainnet.infura.io/v3/692cc4f2d5874121a22bbda6b2feb9f3`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body\n    });\n    const result = await response.json();\n    return hexToUTF8(result.result.replace(/^0x0+?20+?[1]{2}?/, \"\"));\n\n  } catch (error) {\n    console.error(error)\n  }\n}    \n\n\n}\n","import React, {useState,useEffect} from \"react\";\nimport { Button , Input ,\n        Space,Tabs,\n        AutoCenter, List,\n        Form} from \"antd-mobile\";\nimport {Api} from \"./api\"\nexport default function App() {\n  const api = new Api()\n  useEffect(()=>{\n    \napi.getWashtradingTop50().then(\n      data=>{\n        console.log(data)\n          setTop50Wash(data)}\n      )\napi.getPhishersTop50().then(\n      data=>{\n        console.log(data)\n          setTop50Phishers(data)}\n      )\napi.getMEVTop50().then(\n      data=>{\n        console.log(data)\n          setTop50MEV(data)}\n      )\n  },[])\n  const [top50Wash, setTop50Wash] = useState<any>(\"\")\n  const [top50Phishers, setTop50Phishers] = useState<any>(\"\")\n  const [top50MEV, setTop50MEV] = useState<any>(\"\")\n  const [mev, setMEV] = useState<any>(\"\")\n  const [phishing, setPhishing] = useState<any>(\"\")\n  const [washtrading, setWashtrading] = useState<any>(\"\")\n\n    \n  const onChange = (formValues:any)=>{\n    let address = formValues.address.toLowerCase()\n    console.log(address)\n    if(address) {\n      if (address.length > 1 && address[1] ===\"x\"){\n        \n      }else{\n        address=\"0x\"+address\n      }\n    \n    api.getMEVStats(address).then((response)=>{\n      \n      if (response?.count){\n      setMEV(response.count)\n      }\n    }).catch(err=>setMEV(\"\"))\n    api.getPhishingStats(address).then((response)=>{\n      \n      if (response?.phisher){\n      setPhishing(response.phisher)\n      }\n    }).catch(err=>setPhishing(\"\"))\n    api.getWashtradingStats(address).then((response)=>{\n      \n      if (response?.washed){\n      setWashtrading(response.washed / response.amount)\n      }\n    }).catch(err=>setWashtrading(\"\"))\n    }\n    else{\n      setPhishing(\"\")\n      setWashtrading(\"\")\n      setMEV(\"\")\n    }\n\n    \n  }\n  \n  return (\n     <AutoCenter> \n\n    <div className=\"App\" style={{backgroundColor:\"#f5f5f5\" , padding: 16,maxWidth:\"400px\",borderRadius:\"8px\", boxShadow:\"2px 1px 6px 0px #ccc\"  }}>\n      <h1 >MEV NFT</h1>\n   \n       <Form onValuesChange={onChange} layout='horizontal' footer ={\n           <Button block color='primary' size='large'>\n          Analyze\n        </Button>\n       }>\n          <Form.Item label='Address' name='address'\n            rules={[\n            {\n              max: 44,\n              min: 40,\n              message: \"Must be a valid Ethereum Address\"\n            },\n          ]}\n            >\n            <Input placeholder='0x..' autoFocus  />\n          </Form.Item>\n        </Form>\n      \n      \n    </div>\n\n       <div className=\"App\" style={{backgroundColor:\"#f5f5f5\" , padding: 16,maxWidth:\"400px\",marginTop: \"20px\", borderRadius:\"8px\", boxShadow:\"2px 1px 6px 0px #ccc\" }}>\n           <List header='Information'>\n             { mev  && <List.Item   extra={mev}>\n          MEV\n        </List.Item>}\n             {phishing &&  <List.Item   extra={phishing}>\n          Phishing\n        </List.Item>}\n             { washtrading &&  <List.Item   extra={`${(washtrading * 100).toFixed(2)}%`}>\n          Washtrading\n        </List.Item>}\n       \n      </List>\n         </div>\n\n         <div className=\"App\" style={{backgroundColor:\"#f5f5f5\" , padding: 16,maxWidth:\"400px\",marginTop: \"20px\", borderRadius:\"8px\", boxShadow:\"2px 1px 6px 0px #ccc\" }}>\n            <Tabs>\n          <Tabs.Tab title='MEV' key='mev'>\n           <List header='MEV Count'>\n             {top50MEV  && top50MEV.slice(0,10).map((item:any)=><List.Item   extra={item.mev_trades}>\n               <p style={{fontSize:\"13px\"}}>{item.contract_address}</p>\n        </List.Item>)}\n      </List>\n          </Tabs.Tab>\n          <Tabs.Tab title='Phishing' key='phishing'>\n          <List header='Phishing Count'>\n             {top50Wash  && top50Wash.slice(0,10).map((item:any)=><List.Item   extra={item.wash_volume}>\n               <p style={{fontSize:\"13px\"}}>{item.nft_contract_address}</p>\n          \n        </List.Item>)}\n      </List>\n          </Tabs.Tab>\n          <Tabs.Tab title='Washtrading' key='washtrading'>\n          <List header='Washtrading Volume'>\n             {top50Wash  && top50Wash.slice(0,10).map((item:any)=><List.Item   extra={item.wash_volume}>\n                 <p style={{fontSize:\"13px\"}}>{item.nft_contract_address}</p>\n         \n        </List.Item>)}\n      </List>\n          </Tabs.Tab>\n        </Tabs>\n           \n           \n         </div>\n       </AutoCenter>\n  );\n}\n","import \"./public-path\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}